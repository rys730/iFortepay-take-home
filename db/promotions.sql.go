// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: promotions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getProductPromotionsByProductID = `-- name: GetProductPromotionsByProductID :many
select p.promotion_type, pp.id, pp.created_at, pp.updated_at, pp.deleted_at, pp.promotion_id, pp.product_id, pp.min_quantity, pp.free_product_id, pp.discount, pp.free_quantity, pp.pay_y
from promotions p join product_promotions pp on pp.promotion_id = p.id
where p.start_date <= CURRENT_DATE
  and p.end_date >= CURRENT_DATE
  and pp.product_id = $1
  and pp.deleted_at is null
  and p.deleted_at is null
`

type GetProductPromotionsByProductIDRow struct {
	PromotionType string
	ID            int32
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
	DeletedAt     pgtype.Timestamptz
	PromotionID   int32
	ProductID     int32
	MinQuantity   int32
	FreeProductID *int32
	Discount      pgtype.Numeric
	FreeQuantity  *int32
	PayY          *int32
}

func (q *Queries) GetProductPromotionsByProductID(ctx context.Context, productID int32) ([]GetProductPromotionsByProductIDRow, error) {
	rows, err := q.db.Query(ctx, getProductPromotionsByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductPromotionsByProductIDRow
	for rows.Next() {
		var i GetProductPromotionsByProductIDRow
		if err := rows.Scan(
			&i.PromotionType,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PromotionID,
			&i.ProductID,
			&i.MinQuantity,
			&i.FreeProductID,
			&i.Discount,
			&i.FreeQuantity,
			&i.PayY,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
