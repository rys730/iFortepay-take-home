// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: products.sql

package db

import (
	"context"
)

const getProductByID = `-- name: GetProductByID :one
select id, created_at, updated_at, deleted_at, sku, name, price, quantity from products where id = $1 and deleted_at is null and quantity > 0
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Sku,
		&i.Name,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const updateProductQuantity = `-- name: UpdateProductQuantity :one
update products 
set quantity = quantity - $1, updated_at = CURRENT_TIMESTAMP 
where 
    id = $2 and quantity >= $1 and deleted_at is null
returning id, created_at, updated_at, deleted_at, sku, name, price, quantity
`

type UpdateProductQuantityParams struct {
	Quantity int32
	ID       int32
}

func (q *Queries) UpdateProductQuantity(ctx context.Context, arg UpdateProductQuantityParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProductQuantity, arg.Quantity, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Sku,
		&i.Name,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}
